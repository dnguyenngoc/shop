{"ast":null,"code":"(function (root, factory) {\n  if (root === undefined && window !== undefined) root = window;\n\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module unless amdModuleId is set\n    define([\"chartist\"], function (a0) {\n      return root['Chartist.plugins.tooltip'] = factory(a0);\n    });\n  } else if (typeof module === 'object' && module.exports) {\n    // Node. Does not work with strict CommonJS, but\n    // only CommonJS-like environments that support module.exports,\n    // like Node.\n    module.exports = factory(require(\"chartist\"));\n  } else {\n    root['Chartist.plugins.tooltip'] = factory(root[\"Chartist\"]);\n  }\n})(this, function (Chartist) {\n  /**\r\n   * Chartist.js plugin to display a data label on top of the points in a line chart.\r\n   *\r\n   */\n\n  /* global Chartist */\n  (function (window, document, Chartist) {\n    'use strict';\n\n    var defaultOptions = {\n      currency: undefined,\n      currencyFormatCallback: undefined,\n      tooltipOffset: {\n        x: 0,\n        y: -20\n      },\n      anchorToPoint: false,\n      appendToBody: true,\n      class: undefined,\n      pointClass: 'ct-point'\n    };\n    Chartist.plugins = Chartist.plugins || {};\n\n    Chartist.plugins.tooltip = function (options) {\n      options = Chartist.extend({}, defaultOptions, options);\n      return function tooltip(chart) {\n        // Warning: If you are using npm link or yarn link, these instanceof checks will fail and you won't any tooltips\n        var tooltipSelector = options.pointClass;\n\n        if (chart instanceof Chartist.Bar) {\n          tooltipSelector = 'ct-bar';\n        } else if (chart instanceof Chartist.Pie) {\n          // Added support for donut graph\n          if (chart.options.donut) {\n            // Added support for the solid donut graph\n            tooltipSelector = chart.options.donutSolid ? 'ct-slice-donut-solid' : 'ct-slice-donut';\n          } else {\n            tooltipSelector = 'ct-slice-pie';\n          }\n        }\n\n        var $chart = chart.container;\n        var $toolTipIsShown = false;\n        var $tooltipOffsetParent = offsetParent($chart);\n        var $toolTip;\n\n        if (!options.appendToBody) {\n          // searching for existing tooltip in the chart, because appendToBody is disabled\n          $toolTip = $chart.querySelector('.chartist-tooltip');\n        } else {\n          // searching for existing tooltip in the body, because appendToBody is enabled\n          $toolTip = document.querySelector('.chartist-tooltip');\n        }\n\n        if (!$toolTip) {\n          $toolTip = document.createElement('div');\n          $toolTip.className = !options.class ? 'chartist-tooltip' : 'chartist-tooltip ' + options.class;\n\n          if (!options.appendToBody) {\n            $chart.appendChild($toolTip);\n          } else {\n            document.body.appendChild($toolTip);\n          }\n        }\n\n        var height = $toolTip.offsetHeight;\n        var width = $toolTip.offsetWidth;\n        hide($toolTip);\n\n        function on(event, selector, callback) {\n          $chart.addEventListener(event, function (e) {\n            if (!selector || hasClass(e.target, selector)) callback(e);\n          });\n        }\n\n        on('mouseover', tooltipSelector, function (event) {\n          var $point = event.target;\n          var tooltipText = '';\n          var isPieChart = chart instanceof Chartist.Pie ? $point : $point.parentNode;\n          var seriesName = isPieChart ? $point.parentNode.getAttribute('ct:meta') || $point.parentNode.getAttribute('ct:series-name') : '';\n          var meta = $point.getAttribute('ct:meta') || seriesName || '';\n          var hasMeta = !!meta;\n          var value = $point.getAttribute('ct:value');\n\n          if (options.transformTooltipTextFnc && typeof options.transformTooltipTextFnc === 'function') {\n            value = options.transformTooltipTextFnc(value);\n          }\n\n          if (options.tooltipFnc && typeof options.tooltipFnc === 'function') {\n            tooltipText = options.tooltipFnc(meta, value);\n          } else {\n            if (options.metaIsHTML) {\n              var txt = document.createElement('textarea');\n              txt.innerHTML = meta;\n              meta = txt.value;\n            }\n\n            meta = '<span class=\"chartist-tooltip-meta\">' + meta + '</span>';\n\n            if (hasMeta) {\n              tooltipText += meta + '<br>';\n            } else {\n              // For Pie Charts also take the labels into account\n              // Could add support for more charts here as well!\n              if (chart instanceof Chartist.Pie) {\n                var label = next($point, 'ct-label');\n\n                if (label) {\n                  tooltipText += text(label) + '<br>';\n                }\n              }\n            }\n\n            if (value) {\n              if (options.currency) {\n                if (options.currencyFormatCallback != undefined) {\n                  value = options.currencyFormatCallback(value, options);\n                } else {\n                  value = options.currency + value.replace(/(\\d)(?=(\\d{3})+(?:\\.\\d+)?$)/g, '$1,');\n                }\n              }\n\n              value = '<span class=\"chartist-tooltip-value\">' + value + '</span>';\n              tooltipText += value;\n            }\n          }\n\n          if (tooltipText) {\n            $toolTip.innerHTML = tooltipText; // Calculate new width and height, as toolTip width/height may have changed with innerHTML change\n\n            height = $toolTip.offsetHeight;\n            width = $toolTip.offsetWidth;\n\n            if (options.appendToBody !== true) {\n              $tooltipOffsetParent = offsetParent($chart);\n            }\n\n            if ($toolTip.style.display !== 'absolute') {\n              $toolTip.style.display = 'absolute';\n            }\n\n            setPosition(event);\n            show($toolTip); // Remember height and width to avoid wrong position in IE\n\n            height = $toolTip.offsetHeight;\n            width = $toolTip.offsetWidth;\n          }\n        });\n        on('mouseout', tooltipSelector, function () {\n          hide($toolTip);\n        });\n        on('mousemove', null, function (event) {\n          if (options.anchorToPoint === false && $toolTipIsShown) {\n            setPosition(event);\n          }\n        });\n\n        function setPosition(event) {\n          height = height || $toolTip.offsetHeight;\n          width = width || $toolTip.offsetWidth;\n          var offsetX = -width / 2 + options.tooltipOffset.x;\n          var offsetY = -height + options.tooltipOffset.y;\n          var anchor = options.anchorToPoint === true && event.target.x2 && event.target.y2;\n\n          if (options.appendToBody === true) {\n            if (anchor) {\n              var box = $chart.getBoundingClientRect();\n              var left = event.target.x2.baseVal.value + box.left + window.pageXOffset;\n              var top = event.target.y2.baseVal.value + box.top + window.pageYOffset;\n              $toolTip.style.left = left + offsetX + 'px';\n              $toolTip.style.top = top + offsetY + 'px';\n            } else {\n              $toolTip.style.left = event.pageX + offsetX + 'px';\n              $toolTip.style.top = event.pageY + offsetY + 'px';\n            }\n          } else {\n            var offsetBox = $tooltipOffsetParent.getBoundingClientRect();\n            var allOffsetLeft = -offsetBox.left - window.pageXOffset + offsetX;\n            var allOffsetTop = -offsetBox.top - window.pageYOffset + offsetY;\n\n            if (anchor) {\n              var box = $chart.getBoundingClientRect();\n              var left = event.target.x2.baseVal.value + box.left + window.pageXOffset;\n              var top = event.target.y2.baseVal.value + box.top + window.pageYOffset;\n              $toolTip.style.left = left + allOffsetLeft + 'px';\n              $toolTip.style.top = top + allOffsetTop + 'px';\n            } else {\n              $toolTip.style.left = event.pageX + allOffsetLeft + 'px';\n              $toolTip.style.top = event.pageY + allOffsetTop + 'px';\n            }\n          }\n        }\n        /**\r\n         * Shows the tooltip element, if not shown\r\n         * @param element\r\n         */\n\n\n        function show(element) {\n          $toolTipIsShown = true;\n\n          if (!hasClass(element, 'tooltip-show')) {\n            element.className = element.className + ' tooltip-show';\n          }\n        }\n        /**\r\n         * Hides the tooltip element\r\n         * @param element\r\n         */\n\n\n        function hide(element) {\n          $toolTipIsShown = false;\n          var regex = new RegExp('tooltip-show' + '\\\\s*', 'gi');\n          element.className = element.className.replace(regex, '').trim();\n        }\n      };\n    };\n    /**\r\n     * Returns whether a element has a css class called className\r\n     * @param element\r\n     * @param className\r\n     * @return {boolean}\r\n     */\n\n\n    function hasClass(element, className) {\n      return (' ' + element.getAttribute('class') + ' ').indexOf(' ' + className + ' ') > -1;\n    }\n\n    function next(element, className) {\n      do {\n        element = element.nextSibling;\n      } while (element && !hasClass(element, className));\n\n      return element;\n    }\n    /**\r\n     *\r\n     * @param element\r\n     * @return {string | string}\r\n     */\n\n\n    function text(element) {\n      return element.innerText || element.textContent;\n    }\n    /**\r\n     * Returns the first positioned parent of the element\r\n     * @return HTMLElement\r\n     */\n\n\n    function offsetParent(elem) {\n      if (offsetParent in elem) {\n        // Using the native property if possible\n        var parent = elem.offsetParent;\n\n        if (!parent) {\n          parent = document.body.parentElement;\n        }\n\n        return parent;\n      }\n\n      var parent = elem.parentNode;\n\n      if (!parent) {\n        return document.body.parentElement;\n      }\n\n      if (window.getComputedStyle(parent).position !== 'static') {\n        return parent;\n      } else if (parent.tagName === 'BODY') {\n        return parent.parentElement;\n      } else {\n        return offsetParent(parent);\n      }\n    }\n  })(window, document, Chartist);\n\n  return Chartist.plugins.tooltip;\n});","map":null,"metadata":{},"sourceType":"script"}